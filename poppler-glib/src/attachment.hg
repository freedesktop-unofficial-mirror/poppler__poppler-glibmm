/* Copyright (c) 2010  Glenn Rice <glennricster@gmail.com>
 *
 * This file is part of poppler-glibmm.
 *
 * poppler-glibmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * poppler-glibmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(poppler-glibmm,poppler-glib)
_PINCLUDE(glibmm/private/object_p.h)
_CC_INCLUDE(poppler-attachment.h)

namespace Poppler
{

/** Poppler::Attachment - Attachments
 */
class Attachment : public Glib::Object
{
  _CLASS_GOBJECT(Attachment, PopplerAttachment, POPPLER_ATTACHMENT, Glib::Object, GObject)

  protected:
    _CTOR_DEFAULT

  public:
    /** A signal handler would be, for instance:
     * bool on_attachment_save(const gchar* buf, gsize count);
     */
    typedef sigc::slot<bool, const gchar*, gsize> SlotAttachmentSave;

    /** Saves attachment to a file indicated by @a filename.  If an error
     * occurs, <tt>false</tt> will be returned.
     * @newin{0,14}
     * @param filename Name of file to save.
     * @return <tt>true</tt>, if the file successfully saved.
     * @throws Glib::FileError
     */
    _WRAP_METHOD(bool save(const std::string& filename) const, poppler_attachment_save, errthrow)

    _MEMBER_GET(name, name, Glib::ustring, const gchar*)
    _MEMBER_GET(description, description, Glib::ustring, const gchar*)
    _MEMBER_GET(size, size, gsize, gsize)
    _MEMBER_GET(mtime, mtime, GTime, GTime)
    _MEMBER_GET(ctime, ctime, GTime, GTime)
    _MEMBER_GET(checksum, checksum->str, std::string, gchar*)

    /** Saves attachment by feeding the produced data to the slot save
     * function. Can be used when you want to store the attachment to something
     * other than a file, such as an in-memory buffer or a socket.  If an error
     * occurs, <tt>false</tt> will be returned.
     * @param slot A function that is called to save each block of data that the save routine generates.
     * @return <tt>true</tt>, if the save successfully completed.
     */
    bool save(const SlotAttachmentSave& slot) const;
    _IGNORE(poppler_attachment_save_to_callback)
};

} // namespace Poppler
