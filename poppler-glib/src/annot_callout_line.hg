/* Copyright (c) 2010  Glenn Rice <glennricster@gmail.com>
 *
 * This file is part of poppler-glibmm.
 *
 * poppler-glibmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * poppler-glibmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

_DEFS(poppler-glibmm,poppler-glib)
_CC_INCLUDE(poppler-annot.h)

namespace Poppler
{

/** Poppler::AnnotCalloutLine - Annotation callout line
 */
class AnnotCalloutLine
{
  _CLASS_BOXEDTYPE(AnnotCalloutLine, PopplerAnnotCalloutLine, poppler_annot_callout_line_new,
                   poppler_annot_callout_line_copy, poppler_annot_callout_line_free)

  public:
    _MEMBER_GET(multiline, multiline, bool, gboolean)
    _MEMBER_SET(multiline, multiline, bool, gboolean)

    _MEMBER_GET(x1, x1, double, gdouble)
    _MEMBER_SET(x1, x1, double, gdouble)
    _MEMBER_GET(y1, y1, double, gdouble)
    _MEMBER_SET(y1, y1, double, gdouble)
    _MEMBER_GET(x2, x2, double, gdouble)
    _MEMBER_SET(x2, x2, double, gdouble)
    _MEMBER_GET(y2, y2, double, gdouble)
    _MEMBER_SET(y2, y2, double, gdouble)
    _MEMBER_GET(x3, x3, double, gdouble)
    _MEMBER_GET(y3, y3, double, gdouble)
    _MEMBER_SET(y3, y3, double, gdouble)

    /** This typedef is just to make it more obvious that
     * our operator const void* should be used like operator bool().
     */
    typedef const void* BoolExpr;

    /** Tests whether the AnnotCalloutLine is valid.
     * For instance,
     * @code
     * if (annot) do_something()
     * @endcode
     */
    inline operator BoolExpr() const { return gobj() ? GINT_TO_POINTER(1) : 0; }

  private:
    /** Relational operators are deleted to prevent invalid conversion
     * to const void*.
     */
    bool operator<(const AnnotCalloutLine& src) const;

    /// See operator<().
    bool operator<=(const AnnotCalloutLine& src) const;

    /// See operator<().
    bool operator>(const AnnotCalloutLine& src) const;

    /// See operator<().
    bool operator>=(const AnnotCalloutLine& src) const;

    /// See operator<().
    bool operator==(const AnnotCalloutLine& src) const;

    /// See operator<().
    bool operator!=(const AnnotCalloutLine& src) const;
};

} // namespace Poppler
